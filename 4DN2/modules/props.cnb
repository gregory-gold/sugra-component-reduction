{
	"cell_id": 14693665255475561834,
	"cells": [
		{
			"cell_id": 8953692123411308645,
			"cell_origin": "client",
			"cell_type": "latex",
			"cells": [
				{
					"cell_id": 11034245826927733817,
					"cell_origin": "client",
					"cell_type": "latex_view",
					"source": "\\section*{Properties}\nThis notebook defines all cadabra properties used in 5D N=1 including indicies, derivatives, dependence, symmetries, sort order, and anti commutation."
				}
			],
			"hidden": true,
			"source": "\\section*{Propertieas}\nThis notebook defines all cadabra properties used in 5D N=1 including indicies, derivatives, dependence, symmetries, sort order, and anti commutation."
		},
		{
			"cell_id": 8439456159330506223,
			"cell_origin": "client",
			"cell_type": "input",
			"source": "from latex_macros import *"
		},
		{
			"cell_id": 16228761011054463144,
			"cell_origin": "client",
			"cell_type": "input",
			"source": "# Spinor\n{\\a, \\b, \\p, \\l, \\g, \\alpha#}::Indices(spinor, position=independent).\r\n{\\a, \\b, \\p, \\l, \\g, \\alpha#}::Integer(1..2).\n{\\ad,\\bd, \\pd, \\ld, \\gd, \\ad#}::Indices(spinordot, position=independent).\r\n{\\ad, \\bd, \\pd, \\ld, \\gd, \\ad#}::Integer(1..2).\n\n# SU(2)\n{i, j, k, l, i#}::Indices(su2,position=independent).\r\n{i, j, k, l, i#}::Integer(1..2).\n\n# Lorentz\n{ a, b, c, d, a#}::Indices(vector).\r\n{ a, b, c, d, a#}::Integer(0..d-1).\n\n# Objects\n\\d{#}::KroneckerDelta.\n\\eta_{a b}::Metric.\r\ng_{a b}::Metric.\r\n\\eta_{a}^{b}::KroneckerDelta.\r\nI::ImaginaryI.\r\n\\e_{q? r?}::AntiSymmetric.\r\n\\e^{q? r?}::AntiSymmetric."
		},
		{
			"cell_id": 4634205866193529924,
			"cell_origin": "client",
			"cell_type": "input",
			"source": "# Declare Operators as Derivatives\r\n\\D{#}::Derivative.\n\\D{#}::SelfAntiCommuting.\r\n\\Db{#}::Derivative.\n\\Db{#}::SelfAntiCommuting.\n{\\D{#}, \\Db{#}}::AntiCommuting.\r\nM{#}::Derivative.\r\nJ{#}::Derivative.\r\nD{#}::Derivative.\r\nY{#}::Derivative.\r\nS{#}::Derivative.\r\nSb{#}::Derivative.\r\nK{#}::Derivative.\n\n# Objects to be acted upon\n{I, I#}::Indices(position=free).\r\n{\\cW^{I}, \\cWb^{I}, \\cF_{I}, \\cFb_{I}, W{#}, Wb{#}, F{#}, \\l{#}, \\lb{#}, X{#}, \\phi{#}, \\phib{#}}::Depends(\\D{#}, \\Db{#}, M{#}, J{#}, D{#}, Y{#}, S{#}, Sb{#}, K{#}).\r\nW_{\\a \\b}::Symmetric.\r\nWb_{\\ad \\bd}::Symmetric.\r\nW^{\\a \\b}::Symmetric.\r\nWb^{\\ad \\bd}::Symmetric.\nF^{I}_{q? r?}::TableauSymmetry(shape={2}, indices={1,2});.\r\nF^{I}^{q? r?}::TableauSymmetry(shape={2}, indices={1,2});.\r\n\\l{#}::SelfAntiCommuting.\r\n\\lb{#}::SelfAntiCommuting.\n{\\l{#}, \\lb{#}, \\D{#}, \\Db{#}}::AntiCommuting.\r\n\r\n# Dummy Indices and Objects: needed because derivatives can not have multiple indices in Cadabra. For example, \\Lambda^{\\a}_{i}^{A} \\D_{A} is needed to express \\D^{\\a}_{i}.\r\n{A, B, C, A#}::Indices(DummySpinorSU2, position=independent).\r\n{\\A, \\B, \\A#}::Indices(DummySpinorSpinor, position=independent).\r\n{\\i, \\j, \\i#}::Indices(DummySU2SU2, position=independent).\r\n\\Lambda{#}::SelfCommuting.\r\n\\ILambda{#}::SelfCommuting.\n\\Gamma_{a b}^{\\A}::AntiSymmetric.\r\n\\IGamma^{a b}_{\\A}::AntiSymmetric.\r\n{\\Lambda{#}, \\ILambda{#}, \\e{#}, \\cW^{I}, \\cWb^{I}, W_{\\a \\b}, Wb_{\\ad \\bd}}::Commuting.\r\n{\\Lambda{#}, \\ILambda{#}, \\D{#}}::Commuting.\r\n{\\Lambda{#}, \\ILambda{#}, \\Db{#}}::Commuting.\r\n{\\l{#}, \\lb{#}, \\e^{i j}, \\Lambda{#}, \\ILambda{#}, \\e_{\\a \\b}, \\D{#}, \\Db{#}, \\cW{#}, \\cWb{#}}::SortOrder."
		},
		{
			"cell_id": 15882308183110873727,
			"cell_origin": "client",
			"cell_type": "input",
			"source": ""
		}
	],
	"description": "Cadabra JSON notebook format",
	"version": 1.0
}
