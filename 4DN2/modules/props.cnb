{
	"cell_id": 14693665255475561834,
	"cells": [
		{
			"cell_id": 8953692123411308645,
			"cell_origin": "client",
			"cell_type": "latex",
			"cells": [
				{
					"cell_id": 14231940342030836872,
					"cell_origin": "client",
					"cell_type": "latex_view",
					"source": "\\section*{Properties}\nThis notebook defines all cadabra properties used in 4D N=2 including indicies, derivatives, dependence, symmetries, sort order, and anti commutation."
				}
			],
			"hidden": true,
			"source": "\\section*{Properties}\nThis notebook defines all cadabra properties used in 4D N=2 including indicies, derivatives, dependence, symmetries, sort order, and anti commutation."
		},
		{
			"cell_id": 8439456159330506223,
			"cell_origin": "client",
			"cell_type": "input",
			"source": "from latex_macros import *  "
		},
		{
			"cell_id": 16228761011054463144,
			"cell_origin": "client",
			"cell_type": "input",
			"source": "## Indices ##\n# Spinor\n{\\a, \\b, \\p, \\l, \\g, \\t, \\alpha#}::Indices(spinor, position=independent).\r\n{\\a, \\b, \\p, \\l, \\g, \\t, \\alpha#}::Integer(1..2).\n{\\ad,\\bd, \\pd, \\ld, \\gd, \\td, \\ad#}::Indices(spinordot, position=independent).\r\n{\\ad, \\bd, \\pd, \\ld, \\gd, \\td, \\ad#}::Integer(1..2).\n\n# SU(2)\n{i, j, k, l, m, n, i#}::Indices(su2, position=independent).\r\n{i, j, k, l, m, n, i#}::Integer(1..2).\n\n# Lorentz\n{a, b, c, d, e, e#}::Indices(vector, position=independent).\r\n{a, b, c, d, e, e#}::Integer(0..3).\n\n# Vector Multiplet\n{I, J, K, L, I#}::Indices(multiplet, position=independent).\n\n## Dummy Indices and Objects ## These are needed because derivatives can not have multiple indices in cadabra. For example, \\Lambda^{\\a}_{i}^{A} \\D_{A} is needed to represent \\D^{\\a}_{i}.\r\n{A, B, C, A#}::Indices(DummySpinorSU2, position=independent).\r\n{\\A, \\B, \\C, \\A#}::Indices(DummySpinorSpinor, position=independent).\r\n{\\i, \\j, \\i#}::Indices(DummySU2SU2, position=independent).\n{H, H#}::Indices(DummyLorentzLorentz, position=independent).\n\n## Delta and Metrics ##\n\\d{#}::KroneckerDelta.\n\\eta_{a b}::Metric(signature = -1). \n\\eta^{a b}::InverseMetric(signature = -1).\r\n\\e_{q? r?}::AntiSymmetric.\r\n\\e^{q? r?}::AntiSymmetric.\n\\eLevi{#}::EpsilonTensor(delta=\\d, metric=\\eta_{a b})."
		},
		{
			"cell_id": 4634205866193529924,
			"cell_origin": "client",
			"cell_type": "input",
			"source": "## Declare Operators as Derivatives ##\r\n\\D{#}::Derivative.\r\n\\Db{#}::Derivative.\n\\vD{#}::Derivative.\n\\mD{#}::Derivative.\r\nM{#}::Derivative.\nMb{#}::Derivative.\r\n\\J{#}::Derivative.\r\nD{#}::Derivative.\r\nY{#}::Derivative.\r\nS{#}::Derivative.\r\nSb{#}::Derivative.\r\n\\K{#}::Derivative.\n\n## Field and Object Symmetries ##\r\nW_{\\a \\b}::Symmetric.\r\nWb^{\\ad \\bd}::Symmetric.\nW^{a b}::AntiSymmetric.\n\\fW_{\\a \\b \\g}^{i}::TableauSymmetry(shape={3}, indices={0,1,2}).\n\\fWb^{\\ad \\bd \\gd}_{i}::TableauSymmetry(shape={3}, indices={0,1,2}).\n\\wX_{\\a \\b}^{i j}::TableauSymmetry(shape={2}, indices={0,1}, shape={2}, indices={2,3}).\n\\wXb^{\\ad \\bd}^{i j}::TableauSymmetry(shape={2}, indices={0,1}, shape={2}, indices={2,3}).\n\\wX_{a b}^{i j}::TableauSymmetry(shape={1,1}, indices={0,1}, shape={2}, indices={2,3}).\n\\wX^{a b}^{i j}::TableauSymmetry(shape={1,1}, indices={0,1}, shape={2}, indices={2,3}).\nF_{\\a \\b}^{I}::TableauSymmetry(shape={2}, indices={0,1}).\r\nFb^{\\ad \\bd}^{I}::TableauSymmetry(shape={2}, indices={0,1}).\nF_{a b}^{I}::TableauSymmetry(shape={1,1}, indices={0,1}).\nF^{a b}^{I}::TableauSymmetry(shape={1,1}, indices={0,1}).\n\\vX^{i j}^{I}::TableauSymmetry(shape={2}, indices={0,1}).\n\\dF_{\\a \\b}^{I}::TableauSymmetry(shape={2}, indices={0,1}).\r\n\\dFb^{\\ad \\bd}^{I}::TableauSymmetry(shape={2}, indices={0,1}).\n\\dF_{a b}^{I}::TableauSymmetry(shape={1,1}, indices={0,1}).\n\\dF^{a b}^{I}::TableauSymmetry(shape={1,1}, indices={0,1}).\n\\dX^{i j}^{I}::TableauSymmetry(shape={2}, indices={0,1}).\n\\cF_{I J}::Symmetric.\n\\cF_{I J K}::Symmetric.\n\\cF_{I J K L}::Symmetric.\n\\tB_{\\a \\b}^{I}::TableauSymmetry(shape={2}, indices={0,1}).\n\\tBb^{\\ad \\bd}^{I}::TableauSymmetry(shape={2}, indices={0,1}).\n\\tB_{a b}^{I}::TableauSymmetry(shape={1,1}, indices={0,1}).\n\\tB^{a b}^{I}::TableauSymmetry(shape={1,1}, indices={0,1}).\n\\tB^{i j}^{I}::TableauSymmetry(shape={2}, indices={0,1}).\n\\tBb^{i j}^{I}::TableauSymmetry(shape={2}, indices={0,1}).\nG^{i j}^{I}::TableauSymmetry(shape={2}, indices={0,1}).\n# Omega will be spinor spinor OR spinordot spinordot, like 5D. Gamma will be spinor spinordot. Both will use dummy index \\A, which is OK. \\Gamma is basically AOmega from 5d, but now we can actually use a different character.\n\n## Field Dependence ##\n{\\cF{#}, \\cFb{#}, W{#}, Wb{#}, \\fW{#}, \\fWb{#}, \\fS{#}, \\fSb{#}, \\wX{#}, \\wXb{#}, \\vW^{I}, \\vWb^{I}, \\fl{#}, \\flb{#}, \\vX{#}, F{#}, Fb{#}, \\dW^{I}, \\dWb^{I}, \\dfl{#}, \\dflb{#}, \\dX{#}, \\dF{#}, \\dFb{#}, \\psib{#}, \\phib{#}, D, \\P{#}, \\Pb{#}, \\fB{#}, \\fBb{#}, \\tB{#}, \\tBb{#}, G{#}, \\chi{#}, \\chib{#}, \\tF, \\tFb, \\tH{#}, \\psi{#}, \\phi{#}}::Depends(\\D{#}, \\Db{#}, \\mD{#}, \\vD{#}, M{#}, Mb{#}, \\J{#}, D{#}, Y{#}, S{#}, Sb{#}, \\K{#}).\n\n### Note: The below may seem confusing, but cadabra's sort_product() algorithm is problematic with fermionic derivatives. This is even true when fermions are nested in bosonic derivatives without hard-coding the anticommutation of such objects.\n### We have instead written our own sort() algorithm that requires sort_order and anti_commute lists.\n\n# Sort Order list and map needed for our custome sort() method.\nsort_order = ['\\\\ri', '\\\\cF', '\\\\ILambda', '\\\\IGamma', '\\\\d', '\\\\eta', '\\\\eLevi', '\\\\e', '\\\\s', '\\\\sb', '\\\\psi', '\\\\psib', '\\\\phi', '\\\\phib', 'W', 'Wb', '\\\\fW', '\\\\fWb', '\\\\fS', '\\\\fSb', '\\\\wX', '\\\\wXb', '\\\\wD', '\\\\vW', '\\\\vWb', '\\\\dW', '\\\\dWb', '\\\\fl', '\\\\flb', '\\\\dfl', '\\\\dflb', 'F', 'Fb', '\\\\dF', '\\\\dFb', '\\\\vX', '\\\\dX','\\\\P', '\\\\Pb', '\\\\fB', '\\\\fBb', '\\\\tB', '\\\\tBb', 'G', '\\\\chi', '\\\\chib', '\\\\tF', '\\\\tFb', '\\\\tH', '\\\\Gamma', '\\\\Lambda']\n# Anti Commute list needed for our custom sort() method. It is then converted to a cadabra property as well for use in product_rule(). \n# Self Anticommutation is also applied for everything here. Commutation is assumed for everything not here.\nanti_commute = ['\\\\a', '\\\\b', '\\\\p', '\\\\l', '\\\\g', '\\\\t', '\\\\alpha#', '\\\\ad', '\\\\bd', '\\\\pd', '\\\\ld', '\\\\gd', '\\\\td', '\\\\ad#', 'A', 'B', 'C', 'A#']\n# Below is the only solution I've found so far to take the above list and apply it to the cadabra property. If it can be arbitrary length, that would be better, as the length here is hard-coded. Even better would be to define them in the property first and extract them later, but I do not know how to do so.\nac0 = Ex(anti_commute[0]); ac1 = Ex(anti_commute[1]); ac2 = Ex(anti_commute[2]); ac3 = Ex(anti_commute[3]); ac4 = Ex(anti_commute[4]); ac5 = Ex(anti_commute[5]); ac6 = Ex(anti_commute[6]); ac7 = Ex(anti_commute[7]); ac8 = Ex(anti_commute[8]); ac9 = Ex(anti_commute[9]); ac10 = Ex(anti_commute[10]); ac11 = Ex(anti_commute[11]); ac12 = Ex(anti_commute[12]); ac13 = Ex(anti_commute[13]); ac14 = Ex(anti_commute[14]); ac15 = Ex(anti_commute[15]); ac16 = Ex(anti_commute[16]); ac17 = Ex(anti_commute[17])\n{@(ac0),@(ac1),@(ac2),@(ac3),@(ac4),@(ac5),@(ac6),@(ac7),@(ac8),@(ac9),@(ac10),@(ac11),@(ac12),@(ac13),@(ac14),@(ac15),@(ac16),@(ac17)}::AntiCommuting.\n\n# This are needed only for canonicalise().\n\\fl{#}::SelfAntiCommuting.\n\\flb{#}::SelfAntiCommuting.\n\\vD_{\\A}{\\fl{#}}::SelfAntiCommuting.\n\\vD_{\\A}{\\flb{#}}::SelfAntiCommuting.\n\\dfl{#}::SelfAntiCommuting.\n\\dflb{#}::SelfAntiCommuting.\n\\vD_{\\A}{\\dfl{#}}::SelfAntiCommuting.\n\\vD_{\\A}{\\dflb{#}}::SelfAntiCommuting.\n\\fS{#}::SelfAntiCommuting.\n\\fSb{#}::SelfAntiCommuting.\n\\vD_{\\A}{\\fS{#}}::SelfAntiCommuting.\n\\vD_{\\A}{\\fSb{#}}::SelfAntiCommuting.\n\\fW{#}::SelfAntiCommuting.\n\\fWb{#}::SelfAntiCommuting.\n\\vD_{\\A}{\\fW{#}}::SelfAntiCommuting.\n\\vD_{\\A}{\\fWb{#}}::SelfAntiCommuting.\n\\fB{#}::SelfAntiCommuting.\n\\fBb{#}::SelfAntiCommuting.\n\\vD_{\\A}{\\fB{#}}::SelfAntiCommuting.\n\\vD_{\\A}{\\fBb{#}}::SelfAntiCommuting.\n\\chi{#}::SelfAntiCommuting.\n\\chib{#}::SelfAntiCommuting.\n\\vD_{\\A}{\\chi{#}}::SelfAntiCommuting.\n\\vD_{\\A}{\\chib{#}}::SelfAntiCommuting.\n\\psi{#}::SelfAntiCommuting.\n\\phi{#}::SelfAntiCommuting.\n\\psib{#}::SelfAntiCommuting.\n\\phib{#}::SelfAntiCommuting.\n\\vD_{\\A}{\\phi{#}}::SelfAntiCommuting.\n\\vD_{\\A}{\\phib{#}}::SelfAntiCommuting.\n\\vD_{\\A}{\\psi{#}}::SelfAntiCommuting.\n\\vD_{\\A}{\\psib{#}}::SelfAntiCommuting."
		},
		{
			"cell_id": 3627540418232902527,
			"cell_origin": "client",
			"cell_type": "input",
			"source": ""
		}
	],
	"description": "Cadabra JSON notebook format",
	"version": 1.0
}
